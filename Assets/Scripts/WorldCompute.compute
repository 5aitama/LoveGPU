#pragma kernel CSMain

RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step, _Time;

float2 GetUV (uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition (uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave (float2 uv, float t)
{
    float3 p;

    p.x = uv.x;
    p.y = sin(PI * (uv.x + uv.y + t));
    p.z = uv.y;

    return p;
}

float3 Sphere (float2 uv, float t) {
    float r = 0.9 + 0.1 * sin(PI * (6.0 * uv.x + 4.0 * uv.y + t)); float s = r * cos(0.5 * PI * uv.y);
    float3 p;

    p.x = s * sin(PI * uv.x);
    p.y = r * sin(0.5 * PI * uv.y);
    p.z = s * cos(PI * uv.x);

    return p;
}

float3 Torus (float2 uv, float t) {
    float r1 = 0.7 + 0.1 * sin(PI * (6.0 * uv.x + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (8.0 * uv.x + 4.0 * uv.y + 2.0 * t)); 
    float s = r2 * cos(PI * uv.y) + r1;
    float3 p;

    p.x = s * sin(PI * uv.x);
    p.y = r2 * sin(PI * uv.y);
    p.z = s * cos(PI * uv.x);

    return p;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
    SetPosition(id, Torus(uv, _Time));
}
